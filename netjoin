#!/usr/bin/env python3
# -*- mode: python -*-
from __future__ import print_function
import argparse
import os
import subprocess
import socket
import sys
import json
import shutil
import signal
import http.client
import urllib.parse
import json

config = None

RUN_PATH = '/run/netjoin'
DEV_NAME = 'netjoin0'
CONFIG_PATH = '/etc/netjoin.conf'

API_HOSTNAME = 'netjo.in'

LOCAL_MAIN_ADDRESS = '100.127.96.54'
PEER_MAIN_ADDRESS = '100.127.96.55'

SYSTEMD_UNIT = '''[Unit]
Description=netjoin VPN client

[Service]
Type=notify
ExecStart=%(path)s daemon
NotifyAccess=main

[Install]
WantedBy=network.target'''

CACERT = '''-----BEGIN CERTIFICATE-----
MIIEfTCCA2WgAwIBAgIJAOMIgwg5GwxkMA0GCSqGSIb3DQEBCwUAMIGFMQswCQYD
VQQGEwJQTDEPMA0GA1UEBxMGS3Jha293MRAwDgYDVQQKEwduZXRqb2luMQ8wDQYD
VQQLEwZWUE4gQ0ExEzARBgNVBAMTCm5ldGpvaW4gQ0ExDzANBgNVBCkTBlZQTiBD
QTEcMBoGCSqGSIb3DQEJARYNcm9vdEBuZXRqby5pbjAeFw0xNjA1MjgxNDAxNDRa
Fw0yNjA1MjYxNDAxNDRaMIGFMQswCQYDVQQGEwJQTDEPMA0GA1UEBxMGS3Jha293
MRAwDgYDVQQKEwduZXRqb2luMQ8wDQYDVQQLEwZWUE4gQ0ExEzARBgNVBAMTCm5l
dGpvaW4gQ0ExDzANBgNVBCkTBlZQTiBDQTEcMBoGCSqGSIb3DQEJARYNcm9vdEBu
ZXRqby5pbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMC3skT2D2J/
1I2LBQkxpC37jAEiwoII76v0DBm5jgFdlOxCkENtikeehXEVSNKjeEw6Twgdpk5b
Puo57qXWtCCSQOuwLDnfKpZ30yDS9D57PYX4vr+OxxaeYDRya1VoKfU10bpR6aoJ
LQrToBl2JrwQCh7H2fU+T8Y+lGEPp+i/qSKVT/81TVRKX1i6LqmVvP+f5Q17vAnY
ykgUlbJ/ERUjZUkwI5L2zPsPDt9RrmWPeKsxS2oLqf0+52E7UeApA7K2cizg9TYq
utkAHKNaYi2uc0+dV/U1yN2HaSbJls1c2PHj3DkD2yh9hW/IfxR/e3gnvPFEhdHs
nm66OPN0aosCAwEAAaOB7TCB6jAdBgNVHQ4EFgQUfYx8xfzJM9SVeQ0LNdaqT4QK
C+wwgboGA1UdIwSBsjCBr4AUfYx8xfzJM9SVeQ0LNdaqT4QKC+yhgYukgYgwgYUx
CzAJBgNVBAYTAlBMMQ8wDQYDVQQHEwZLcmFrb3cxEDAOBgNVBAoTB25ldGpvaW4x
DzANBgNVBAsTBlZQTiBDQTETMBEGA1UEAxMKbmV0am9pbiBDQTEPMA0GA1UEKRMG
VlBOIENBMRwwGgYJKoZIhvcNAQkBFg1yb290QG5ldGpvLmluggkA4wiDCDkbDGQw
DAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAC94oCspn4qrm+NVao1Sy
0MG7FCkspkKTKxFU1oec4f8Ii9CXzUyNA80csMqXVh7SdjBV0kHo6JD2N09Xi6Lg
xuxkb+J9N9xlTPrX4XFapDX5JmNfY15r1doIwU3LHg4bvjyuqTu1W52ZFDBgRnNx
53bku6yctTycmB6861IPMrh/Ry1+OXCRrDY5NV/y6yh4+h9I3z2JTAKpEe2ebm1H
6Y+WCbWNDHctGbvisXH9sYUu7cOeQbgJ3DOcF9j1HYCkWlSJURP5VejW9xacuiHY
uU6VzQEDLlup/Zehdbs0ImVjyiYnQjutMVowJC3F2HlcCNNBNhL5Ip/oPDs9lrSv
og==
-----END CERTIFICATE-----
'''

def write_openvpn_config():
    path = RUN_PATH + '/config.ovpn'
    template = '''
<connection>
remote %(ip)s 443 udp
nobind
</connection>

<connection>
remote %(ip)s 443 tcp-client
</connection>

<ca>
%(ca)s
</ca>

dev %(dev_name)s
dev-type tun

up "/bin/sh ./upscript.sh"
script-security 2

tls-client
pull
ifconfig-noexec
route-noexec

auth-user-pass auth.txt
resolv-retry infinite

persist-key
persist-tun

remote-cert-tls server
ping 10
ping-restart 60
''' % dict(ip=config['server_ip'], ca=CACERT, dev_name=DEV_NAME)

    with open(path, 'w') as f:
        f.write(template)

    with open(RUN_PATH + '/upscript.sh', 'w') as f:
        f.write('#!/bin/sh\nkill -USR1 %s\n' % os.getpid())

    with open(RUN_PATH + '/auth.txt', 'w') as f:
        f.write('d%s+client=linuxv1\n%s\n' % (config['dev_id'], config['secret']))

    os.chmod(RUN_PATH + '/auth.txt', 0o600) # just to silience OpenVPN, the parent directory is unenterable anyway

def run_openvpn():
    signal.signal(signal.SIGUSR1, lambda *_: setup_interface())
    status = subprocess.call(['openvpn', 'config.ovpn'], cwd=RUN_PATH)
    sys.exit(status)

def setup():
    if not os.path.exists(RUN_PATH):
        os.mkdir(RUN_PATH)

    os.chmod(RUN_PATH, 0o700)

def setup_interface():
    subprocess.call(['openvpn', '--mktun', '--dev', DEV_NAME, '--dev-type', 'tun'])

    # small race condition
    subprocess.check_call(['ip', 'address', 'flush', 'dev', DEV_NAME])
    subprocess.check_call(['ip', 'link', 'set', 'dev', DEV_NAME, 'up'])
    subprocess.check_call(['ip', 'address', 'add', LOCAL_MAIN_ADDRESS, 'dev', DEV_NAME, 'peer', PEER_MAIN_ADDRESS])

    for address in config['addresses']:
        subprocess.check_call(['ip', 'address', 'add', address['address'], 'dev', DEV_NAME, 'peer', address['routes'][0]])

        peer_address = address['routes'][0].split('/')[0]
        # TODO: add more routes
        #for route in address['routes']:
        #    subprocess.check_call(['ip', 'route', 'add', ])

def check_openvpn():
    out = open('/dev/null', 'w')
    if subprocess.call(['which', 'openvpn'], stdout=out) != 0:
        sys.exit('Please install OpenVPN:\n  apt-get install -y openvpn')

def load_config():
    try:
        data = open(CONFIG_PATH).read()
        return json.loads(data)
    except IOError as err:
        sys.exit('Failed to load configuration (%s). Run `netjoin login`.' % err)

def fork_deamon():
    os.setsid()
    os.close(0)
    os.close(1)
    pid = os.fork()
    if pid != 0:
        os._exit(0)

def notify_systemd(info):
    try:
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
        addr = os.environ.get('NOTIFY_SOCKET')
        if not addr:
            return

        if addr[0] == '@':
            addr = '\0' + addr[1:]

        sock.connect(addr)
        sock.sendall(info.encode('utf8'))
    except Exception as err:
        print('failed to notify systemd about start: %s' % err, file=sys.stderr)

def check_root():
    if os.getuid() != 0:
        print('WARNING: netjoin daemon not running as root', file=sys.stderr)

def run_daemon(ns):
    check_openvpn()
    check_root()
    global config
    config = load_config()
    setup()
    setup_interface()

    notify_systemd('READY=1')

    write_openvpn_config()
    run_openvpn()

def request(method, path, body, tunnel=False):
    if API_HOSTNAME == 'localhost:8000':
        conn = http.client.HTTPConnection(API_HOSTNAME)
    else:
        conn = http.client.HTTPSConnection(API_HOSTNAME)

    if tunnel:
        conn.set_tunnel(PEER_MAIN_ADDRESS, 8090)

    conn.request(method, path, body,
                 {"Content-type": "application/x-www-form-urlencoded"} if body else {})
    resp = conn.getresponse()
    if resp.status != 200:
        raise Exception('request returned %d' % resp.status)
    data = resp.read()
    conn.close()
    return json.loads(data.decode('utf8'))

def run_login(ns):
    token = ns.token
    resp = request('POST', '/api/v1/device-login', urllib.parse.urlencode(dict(token=token)), tunnel=False)
    config = {
        'dev_id': resp['dev_id'],
        'secret': resp['secret'],
        'addresses': resp['addresses'],
        'geo_hostname': resp['geo_hostname'],
        'server_ip': resp['server_ip'],
    }

    with open(CONFIG_PATH, 'w') as w:
        w.write(json.dumps(config, indent=4))
    os.chmod(CONFIG_PATH, 0o600)

def run_install(ns):
    check_openvpn()
    target = '/usr/local/bin/netjoin'
    shutil.copy(__file__, target)
    os.chmod(target, 0o755)

    with open('/etc/systemd/system/netjoin.service', 'w') as f:
        f.write(SYSTEMD_UNIT % dict(path=target))

    subprocess.check_call(['systemctl', 'enable', 'netjoin'])

    if ns.token:
        run_login(ns)
    else:
        print('Link this device to Netjoin on https://netjo.in/app/add_device')

    print('Start netjoin with:\n\tsystemctl start netjoin')

def main():
    global RUN_PATH, CONFIG_PATH, API_HOSTNAME, CACERT

    parser = argparse.ArgumentParser(
        description='netjoin client',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--run-path', default=RUN_PATH, help='where to store runtime temporary files')
    parser.add_argument('--config-path', default=CONFIG_PATH, help='path to the config file')
    parser.add_argument('--api-hostname', default=API_HOSTNAME, help='API hostname')
    parser.add_argument('--ca-cert', default='<builtin>', help='alternative CA certificate file')

    subparsers = parser.add_subparsers(dest='command')
    daemon = subparsers.add_parser('daemon', help='run the VPN daemon')
    # daemon.add_argument('-f', '--foreground', help="don't daemonize", action='store_true')
    install = subparsers.add_parser('install', help='install the daemon to system directories')

    install.add_argument('token', nargs='?',
                         help='also create /etc/netjoin.conf by logging in using TOKEN')
    login = subparsers.add_parser('login', help='create /etc/netjoin.conf')
    login.add_argument('token')

    ns = parser.parse_args()

    RUN_PATH = ns.run_path
    CONFIG_PATH = ns.config_path
    API_HOSTNAME = ns.api_hostname
    if ns.ca_cert != '<builtin>':
        CACERT = open(ns.ca_cert, 'r').read()

    if ns.command == 'daemon':
        run_daemon(ns)
    elif ns.command == 'install':
        run_install(ns)
    elif ns.command == 'login':
        run_login(ns)
    else:
        parser.print_help()

if __name__ == '__main__':
    main()
